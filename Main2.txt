/* WORD LADDER Main.java
 * EE422C Project 3 submission by
 * Replace <...> with your actual data.
 * Allen Hwang
 * ah45755
 * <Student1 5-digit Unique No.>
 * Paris Kaman
 * pak679
 * <Student2 5-digit Unique No.>
 * Slip days used: <0>
 * Git URL:
 * Fall 2016
 */




package assignment3;
import java.util.*;
import java.io.*;


public class Main {
        
        private static Set<String> dictionary;
        private static ArrayList<String> checked;
        // static variables and constants only here.
        
        public static void main(String[] args) throws Exception {
                
                Scanner kb;        // input Scanner for commands
                PrintStream ps;        // output file
                // If arguments are specified, read/write from/to files instead of Std IO.
                if (args.length != 0) {
                        kb = new Scanner(new File(args[0]));
                        ps = new PrintStream(new File(args[1]));
                        System.setOut(ps);                        // redirect output to ps
                } else {
                        kb = new Scanner(System.in);// default from Stdin
                        ps = System.out;                        // default to Stdout
                }
                initialize();
                // TODO methods to read in words, output ladder
                String input = kb.nextLine();
        }
        
        public static void initialize() {
                // initialize your static variables or constants here.
                // We will call this method before running our JUNIT tests.  So call it 
                // only once at the start of main.
                dictionary = makeDictionary();
        }
        
        /**
         * @param keyboard Scanner connected to System.in
         * @return ArrayList of 2 Strings containing start word and end word. 
         * If command is /quit, return empty ArrayList. 
         */
        public static ArrayList<String> parse(Scanner keyboard) {
                String input = keyboard.nextLine();
                ArrayList<String> answer = new ArrayList();
                if(input.equals("/quit"))
                        return answer;
                else
                {
                        int spaceIndex = input.indexOf(' ');
                        answer.add(input.substring(0, spaceIndex));
                        answer.add(input.substring(spaceIndex+1, input.length()));
                        return answer;
                }
        }
        
        public static ArrayList<String> getWordLadderDFS(String start, String end) {
                
                ArrayList<String> answer = new ArrayList();
                if(start == null || end == null || start.length() != end.length())
                        return answer;
                
                // Returned list should be ordered start to end.  Include start and end.
                // Return empty list if no ladder.
                // TODO some code
                // TODO more code
                
                checked.add(start);
                
                if(start == end){
                        answer.add(start);
                        return answer;
                }
                
                /*
                 * set up tree of touching words
                 * 
                 */
                
                Node parent = new Node();
                parent.word = start;
                String check;
                for(int j = 0; j < 4; j++){
                        for(char c = 'a'; c <= 'z'; c++){
                                check = parent.word.substring(0,j) + c + parent.word.substring(j,4);
                                if(check.equals(start)){
                                        
                                }
                                else if(check.inDictionary() && !check.beenChecked()){
                                        Node child = new Node(parent);
                                        parent.children.add(child);
                                }
                        }
                }
                
                for(int i = 0; i < parent.children.size(); i++){
                        
                        //        RECURSIVE CALL
                        ArrayList<String> recAnswer = getWordLadderDFS(parent.children.get(i).word, end);
                        
                        
                        if(recAnswer.size() == 0){
                                answer = recAnswer;
                        }
                        else{
                                answer.add(start);
                                for(int j = 0; j < recAnswer.size(); j++){
                                        answer.add(recAnswer.get(i));
                                }
                        }
                }
                
                return answer; // replace this line later with real return
        }
        
    public static ArrayList<String> getWordLadderBFS(String start, String end) {
                
                ArrayList<String> answer = new ArrayList();
                if(start == null || end == null || start.length() != end.length())
                        return answer;
                //This is a test change for use w/ gitHub.
                //MORE TESTS
                // TODO some code
                // TODO more code
                
                
                
                
                return null; // replace this line later with real return
        }
    
        public static Set<String>  makeDictionary () {
                Set<String> words = new HashSet<String>();
                Scanner infile = null;
                try {
                        infile = new Scanner (new File("five_letter_words.txt"));
                } catch (FileNotFoundException e) {
                        System.out.println("Dictionary File not Found!");
                        e.printStackTrace();
                        System.exit(1);
                }
                while (infile.hasNext()) {
                        words.add(infile.next().toUpperCase());
                }
                return words;
        }
        
        public static void printLadder(ArrayList<String> ladder) {
                
        }
        // TODO
        // Other private static methods here
}